'''
**********************

This is the main part of the program.
It opens camera and waits user input (space).
When the user presses space, it takes photo, predicts each emotions percentage.
Then this percentage multiplied with the related values created in Part 3.
At the end of this multiplication, resulted list traversed at song database.
It find euclidean distance and takes the most similar 5 song and prints to screen.

For this part I used 1.2 million song database that I found from kaggle.
Link: https://www.kaggle.com/datasets/rodolfofigueroa/spotify-12m-songs?resource=download

**********************
'''

# Opening the camera
cap = cv2.VideoCapture(0)

# Loading the previously made model
emotion_model = load_model('emotion_model.h5')

# Defining labels of the model
emotion_labels = {0: 'Angry', 1: 'Disgust', 2: 'Fear', 3: 'Happy', 4: 'Sad', 5: 'Surprise', 6: 'Neutral'}

# Mean values created in previous step
mean_values_angry = [0.5660000000000001, 0.81612, 4.78, -5.04438, 0.68, 0.136136, 0.068866858, 0.027984404999999993,
                     0.20739999999999995, 0.4914, 132.94598000000002]
mean_values_happy = [0.704420, 0.732930, 5.080000, -5.391920, 0.660000, 0.085185, 0.120840, 0.003602, 0.157909,
                     0.622470, 121.296670]
mean_values_fearful = [0.53374, 0.570164, 4.4, -9.63448, 0.42, 0.10407, 0.33629583999999996, 0.2700180076, 0.201926,
                       0.43048, 127.09622000000002]
mean_values_sad = [0.503575, 0.373745, 4.6, -9.1181625, 0.875, 0.049756249999999995, 0.6663574999999999,
                   0.01028926275, 0.136375, 0.29327500000000006, 113.62836250000001]
mean_values_neutral = [0.64546, 0.48525000000000007, 5.37, -9.51405, 0.55, 0.062011000000000004,
                       0.45286347000000005, 0.16932678590000005, 0.160989, 0.496, 113.98508]

# Opening and selecting columns of 1.2m song database
file_path = 'tracks_features.csv'
df_selected_columns = pd.read_csv(file_path, usecols=range(9, 20))

while True:
    # Capturing frame from webcam
    ret, frame = cap.read()

    # Displaying it while waiting input from the user
    cv2.imshow('Webcam', frame)

    key = cv2.waitKey(1)

    if key == ord(' '):

        # When the user press space, it preprocess captured image for model
        img = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
        img = cv2.resize(img, (48, 48))
        img = img_to_array(img)
        img = np.expand_dims(img, axis=0)
        img /= 255.0

        # Saves emotion percantages here
        result = emotion_model(img)

        # Refactoring fear disgust and suprise
        emotion_percentages = {
            'Angry': result[0][0],
            'Happy': result[0][3],
            'Sad': result[0][4],
            'Neutral': result[0][6],
            'Disgust + Fear + Surprise': result[0][1] + result[0][2] + result[0][5]
        }
        # Prints values to the screen for user to see
        for emotion, percentage in emotion_percentages.items():
            print(f'{emotion}: {percentage * 100:.2f}%')

        # Calculating the weighted mean using emotion_percentages
        mean_values = [
            sum(emotion_percentages[emotion].numpy() * value for emotion, value in
                zip(emotion_percentages.keys(), emotion_values))
            for emotion_values in zip(
                mean_values_happy,
                mean_values_sad,
                mean_values_angry,
                mean_values_neutral,
                mean_values_fearful
            )
        ]

        # Calculating Euclidean distance between mean values and each row in the 1.2m database
        df_selected_columns['distance'] = df_selected_columns.apply(lambda row: euclidean(mean_values, row.values), axis=1)

        # Finding the best 5 row
        most_similar_indices = df_selected_columns['distance'].nsmallest(5).index

        # Reads the original csv file again and takes name(1), album(2), artists(4) columns
        df_original_columns = pd.read_csv(file_path, usecols=[1, 2, 4])

        # Prints these values to the screen
        print("\n\nBest songs for current emotion: \n")
        for index in most_similar_indices:
            print("Song Name:", df_original_columns.loc[index, 'name'])
            print("Album:", df_original_columns.loc[index, 'album'])
            print("Artists:", df_original_columns.loc[index, 'artists'])
            print("---")
        break
        # Breaks after one use
